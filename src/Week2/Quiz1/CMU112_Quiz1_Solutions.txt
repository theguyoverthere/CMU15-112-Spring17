def ct1(x, y, z):

print(x + y ** 2 - z * 2)  --> ( 2 + 5 ** 2 - 7 *2) = (2 + 25 - 7 *2) = (2 + 25 - 14) = 13
print(100*int(y/x) + y/x)  --> (100 * int(5/2) + 5/2) = (100 * int(2.5) + 2.5) = ( 200 + 2.5) = 202.5
print(100*math.ceil(y/x) + y//x) --> (100 * math.ceil(5/2) + 5//2) = (100 * math.ceil(2.5) + 5//2) = (100 * 3 + 5//2) = (300 + 2)= 302
y %= x + z --> y %= 2 + 7 --> y %= 9 --> y = 5 % 9 --> 5
return y
print(ct1(2, 5, 7)) # hint: prints 4 values


2.

def f(x): 
    return 2*x-1
def g(x):                           max(15 % 10, 15//10 % 10) == max(5, 1) = 5 
    return max(x%10, x//10%10)      max(2 % 10, 2 // 10 % 10) == max(2, 0) = 2
def h(x):
    if (x > 0): 
         return x + g(f(x))            8 + g(f(8)) = 8 + g(15) = 8 + 5 = 13
    else:
         return f(min(3, g(abs(x))))    f(min(3,g(abs(-2)))) = f(min(3,g(2))) = f(min(3, 2)) = f(2) = 2 *2 -1 = 3
def ct2(x): 
    print(h(x-5))  print(h(-2)) == 3
    print(h(x+5))  print(h(8))  


print(ct2(3)) # hint: prints 3 values

3
13
None

3.

def rc1(n):
   if ((not isinstance(n, int)) or (n < 100) or (n > 999)):
      return False
   a = n%10
   b = n%100
   c = n//100
 
   return ((a == b) and (a == c) and (abs(n - 600) == a))


| n - 600 | = n % 10 = n % 100 = n // 100 ...(i)    --- n must  be (a multiple of 100) + x    
isinstance(n, int) = True ..n is an integer
n >= 100
n <= 999


n // 100 - 1, 2,3,4,5,6, 7,8,9,
n = 606 will make it return true.

3a. Behaviour of round in Python 3 may be unexpected.
 b. ((x >= 50) and (x % 20)//10 == 0)? x = 60
 c. n = 1 /0 
 d. If x is an int, and (x % 7 > x), what else must be true about x? x must be negative



4.

def isTinyPal(n):
   if isinstance(n, int) and (n > -1000) and (n < 1000):
       if (abs(n) > 9) and (abs(n) < 100):   # two digit number
           leftMostDigit = abs(n) // 10
       else:
           leftMostDigit = abs(n) // 100

       righMostDigit = abs(n) % 10

       if (abs(n) < 10) or (leftMostDigit == righMostDigit): return True
   return False


5.

def bonusCt1(n):
   global min, max, pow

   min = max; max = pow; pow = min

   return max(2*n, min(3*n, pow(n, n+1)))

   print(bonusCt1(2))

pow(2*n, max(3*n, min(n, n+1)))
pow(2*2, max(3*2, min(2, 3)))
pow(4, max(6, 2))
pow(4, 6)
==4 ** 6
== 2 ** 12
== 1024 *4
== 4096


def bonusCt2(x, y):
   return (x + bonusCt2(x - 1, y - 1) if (y > 0) else
          (2 + bonusCt2(x - 1, y) if (x > 0) else 42))
print(bonusCt2(7, 4))

7 + bonusCt2(6,3) = 7 + 6 + bonusCt2(5,2) = 7 + 6 + 5 + bonusCt2(4, 1) = 7 + 6 + 5 + 4 + bonusCt2(3, 0)
                                                                       = 7 + 6 + 5 + 4 + 2 + bonusCt2(2,0)
                                                                       = 7 + 6 + 5 + 4 + 2 + 2 + bonusCt2(1,0)
                                                                       = 7 + 6 + 5 + 4 + 2 + 2 + 2 + bonusCt2(0,0)
                                                                       = 7 + 6 + 5 + 4 + 2 + 2 + 2 + 42
                                                                       = 70
